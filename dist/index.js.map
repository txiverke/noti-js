{"version":3,"file":"index.js","sources":["../src/settings.ts","../src/Message.ts","../src/Auto.ts","../src/Static.ts","../src/Async.ts","../src/index.ts"],"sourcesContent":["export const STYLES = {\n  body: `.notijs_container{position:fixed;width:250px;height: auto;flex-direction:column;list-style:none;padding:5px 0;margin:0;display:flex;align-items:center;}.notijs_message{width:250px;height:auto;border:1px solid rgb(0 0 0 / 0.2);border-radius:3px;box-shadow:0 3px 10px rgb(0 0 0 / 0.2);background:white;padding:10px;margin:5px 0;font-size:13px;box-sizing:border-box;opacity:0;transform:translate(0,0);transition:transform ease-in-out 250ms, opacity ease-in-out 250ms;display:flex;align-items:center;}.notijs_txt{flex:1;margin:0 6px 0 0;}.notijs_icon{margin:0 8px 0 0;width:18px;height:auto;}`,\n  progress: `.notijs_progress{position:absolute;bottom:1px;left:1px;width:0;height:1px;background:rgb(0 0 0 / 0.2)}`,\n  btn: `.notijs_btn{background:transparent;border:none;cursor:pointer;padding:0 0 0 6px;display:flex;justify-content:center;align-items:center;}`,\n  animation: `.notijs_rotate{animation: notijs_rotation .75s linear infinite;}@keyframes notijs_rotation {from{transform: rotate(0deg);}to{transform: rotate(359deg);}`,\n};\n\nexport const OPTIONS = {\n  id: 'render_message_container',\n  duration: 3,\n  position: 'top_right',\n};\n\nexport const POSITIONS = ['top', 'top_left', 'top_right', 'bottom', 'bottom_left', 'bottom_right'];\n\nexport const ANIMATION_SIZE = 10;\n","import { Dict, Extend, Icon, NotijsOptions, Position } from './index';\nimport { OPTIONS, STYLES, ANIMATION_SIZE } from './settings';\nimport successSVG from './svgs/success.svg';\nimport errorSVG from './svgs/error.svg';\nimport notificationSVG from './svgs/notification.svg';\n\nexport class Message {\n  protected duration: number;\n  protected position: Position;\n  protected icon: Icon;\n  protected extend: Extend | undefined;\n  protected $container: HTMLElement;\n  protected $message!: HTMLElement;\n  protected $icon!: HTMLImageElement;\n  private observer: MutationObserver;\n\n  constructor(public text: string, public options: NotijsOptions) {\n    this.text = text;\n    this.duration = (options?.duration || OPTIONS.duration) * 1000;\n    this.position = options?.position || OPTIONS.position;\n    this.icon = options?.icon;\n    this.extend = options?.extend;\n    this.$container = document.getElementById(OPTIONS.id) || document.createElement('ol');\n\n    this.animate = this.animate.bind(this);\n\n    this.observer = new MutationObserver((mutationsList: (MutationRecord & { target: any })[]) => {\n      for (const mutation of mutationsList) {\n        if (mutation.type === 'childList' && mutation.target.id === OPTIONS.id) {\n          this.animate('in');\n        }\n      }\n    });\n  }\n\n  public init() {\n    this.observer.observe(document, { childList: true, subtree: true });\n\n    if (!document.getElementById(OPTIONS.id)) {\n      this.setCSS('body', STYLES.body);\n\n      this.$container.id = OPTIONS.id;\n      this.$container.classList.add('notijs_container');\n\n      document.body.append(this.$container);\n    }\n\n    this.$message = this.setExtend(document.createElement('li'), this.extend?.message || {});\n    this.$message.classList.add('notijs_message');\n    this.$message.setAttribute('role', 'alert');\n    this.$message.setAttribute('aria-live', 'polite');\n\n    if (this.position !== this.$container.dataset.position) {\n      this.$container = this.setPosition(this.$container, this.position);\n    }\n\n    if (this.icon) this.$message.append(this.setIcon());\n\n    const messageTxt = document.createElement('span');\n    messageTxt.classList.add('notijs_txt');\n    messageTxt.textContent = this.text;\n\n    this.$message.append(messageTxt);\n    this.$container.append(this.$message);\n  }\n\n  protected animate(effect: 'in' | 'out') {\n    this.$message.dataset.animation = effect;\n    let coords = [0, 0];\n\n    switch (this.position) {\n      case 'top':\n        coords = effect === 'in' ? [0, ANIMATION_SIZE] : [0, -ANIMATION_SIZE];\n        break;\n      case 'bottom':\n        coords = effect === 'in' ? [0, -ANIMATION_SIZE] : [0, ANIMATION_SIZE];\n        break;\n      case 'top_right':\n      case 'bottom_right':\n        coords = effect === 'in' ? [-ANIMATION_SIZE, 0] : [ANIMATION_SIZE, 0];\n        break;\n      case 'top_left':\n      case 'bottom_left':\n        coords = effect === 'in' ? [ANIMATION_SIZE, 0] : [-ANIMATION_SIZE, 0];\n        break;\n    }\n\n    setTimeout(() => {\n      this.$message.style.transform = `translate(${coords[0]}px, ${coords[1]}px)`;\n      this.$message.style.opacity = effect === 'in' ? '1' : '0';\n    });\n\n    this.observer.disconnect();\n  }\n\n  private setIcon() {\n    const { src, alt } =\n      typeof this.icon === 'object'\n        ? this.icon\n        : {\n            src:\n              this.icon === 'error'\n                ? errorSVG\n                : this.icon === 'success'\n                ? successSVG\n                : notificationSVG,\n            alt: this.icon,\n          };\n\n    this.$icon = document.createElement('img');\n    this.$icon.src = src;\n    this.$icon.alt = alt || 'Icon';\n    this.$icon.classList.add('notijs_icon');\n\n    return this.$icon;\n  }\n\n  public setCSS(prop: string, style: string) {\n    const id = `notijs_${prop}`;\n\n    if (!document.getElementById(id)) {\n      const styles = document.createElement('style');\n      styles.id = id;\n      styles.textContent = style;\n\n      document.head.append(styles);\n    }\n  }\n\n  public setExtend(el: HTMLElement, styles: Dict<string | number>) {\n    for (let key in styles) {\n      // @ts-ignoref\n      el.style[key] = styles[key];\n    }\n\n    return el;\n  }\n\n  private setPosition(el: HTMLElement, position: Position) {\n    const pos = {} as Dict<string | number>;\n    const parts = position.split('_');\n\n    for (let key of parts) {\n      pos[key] = 0;\n    }\n\n    return this.setExtend(el, parts.length === 1 ? { ...pos, width: '100%' } : pos);\n  }\n\n  protected destroy() {\n    this.$message.remove();\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions } from './index';\nimport { STYLES } from './settings';\n\nexport class Auto extends Message {\n  $progress!: HTMLElement;\n  startProgress!: number;\n  previousProgress!: number;\n\n  protected endTransitionEventListener: EventListener;\n\n  constructor(text: string, options: NotijsOptions) {\n    super(text, options);\n    this.endTransitionEventListener = () => this.destroy();\n  }\n\n  public render() {\n    this.init();\n    this.setCSS('progress', STYLES.progress);\n\n    this.$progress = this.setExtend(document.createElement('div'), this.extend?.progressbar || {});\n    this.$progress.classList.add('notijs_progress');\n    this.$message.appendChild(this.$progress);\n    this.$message.addEventListener('transitionend', this.endTransitionEventListener);\n\n    window.requestAnimationFrame(this.progressBar.bind(this));\n\n    setTimeout(() => this.animate('out'), this.duration);\n  }\n\n  private progressBar(curProgress: number) {\n    if (!this.startProgress) {\n      this.startProgress = curProgress;\n    }\n\n    const elapsed = curProgress - this.startProgress;\n\n    if (this.previousProgress !== curProgress) {\n      const count = (elapsed / this.duration) * 99;\n      this.$progress.style.width = `${count}%`;\n    }\n\n    if (elapsed < this.duration) {\n      this.previousProgress = curProgress;\n      window.requestAnimationFrame(this.progressBar.bind(this));\n    }\n  }\n\n  protected destroy() {\n    if (this.$message.dataset.animation === 'out') {\n      super.destroy();\n\n      this.$message.removeEventListener('transitionend', this.endTransitionEventListener);\n    }\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions } from './index';\nimport { STYLES } from './settings';\n\nimport closeSVG from './svgs/close.svg';\n\nexport class Static extends Message {\n  public $button: HTMLElement;\n  protected clickEventListener: EventListener;\n\n  constructor(text: string, options: NotijsOptions) {\n    super(text, options);\n    this.$button = document.createElement('button');\n    this.clickEventListener = () => this.destroy();\n  }\n\n  public render() {\n    this.init();\n    this.setCSS('btn', STYLES.btn);\n\n    const img = document.createElement('img');\n    img.src = closeSVG;\n    img.alt = 'Close Message';\n\n    this.$button.classList.add('notijs_btn');\n    this.$button.appendChild(img);\n    this.$button.addEventListener('click', this.clickEventListener);\n\n    this.$message.appendChild(this.$button);\n  }\n\n  protected destroy() {\n    super.destroy();\n    this.$button.removeEventListener('click', this.clickEventListener);\n  }\n}\n","import { Message } from './Message';\nimport { STYLES } from './settings';\nimport { NotijsOptions, NotijsPromise } from './index';\nimport loadingSVG from './svgs/loading.svg';\nimport successSVG from './svgs/success.svg';\nimport errorSVG from './svgs/error.svg';\n\ntype State = 'error' | 'running' | 'success';\n\nexport class Async extends Message {\n  public $loader: HTMLImageElement;\n  protected endTransitionEventListener: EventListener;\n\n  constructor(text: string, options: NotijsOptions, public promise: NotijsPromise) {\n    super(text, options);\n    this.promise = promise;\n    this.$loader = document.createElement('img');\n    this.endTransitionEventListener = () => this.destroy();\n  }\n\n  public async render() {\n    this.init();\n    this.setCSS('animation', STYLES.animation);\n\n    this.$loader.src = loadingSVG;\n    this.$loader.alt = 'Loading...';\n    this.$message.addEventListener('transitionend', this.endTransitionEventListener);\n\n    return await this.exec();\n  }\n\n  private async exec() {\n    try {\n      this.setState('running');\n      const response = await this.promise.fn();\n      this.setState('success');\n      return response;\n    } catch (error) {\n      this.setState('error');\n      return error;\n    }\n  }\n\n  private setState(currentState: State) {\n    const txt = this.$message.getElementsByTagName('span')[0];\n\n    switch (currentState) {\n      case 'error':\n        this.$loader.classList.remove('notijs_rotate');\n        this.$loader.src = errorSVG;\n        txt.textContent = this.promise.error;\n        setTimeout(() => this.animate('out'), this.duration);\n        break;\n\n      case 'success':\n        this.$loader.classList.remove('notijs_rotate');\n        this.$loader.src = successSVG;\n        txt.textContent = this.promise.success;\n        setTimeout(() => this.animate('out'), this.duration);\n        break;\n      default:\n        this.$loader.classList.add('notijs_rotate');\n        this.$message.append(this.$loader);\n    }\n  }\n\n  protected destroy() {\n    if (this.$message.dataset.animation === 'out') {\n      super.destroy();\n\n      this.$message.removeEventListener('transitionend', this.endTransitionEventListener);\n    }\n  }\n}\n","import { Auto } from './Auto';\nimport { Static } from './Static';\nimport { Async } from './Async';\n\ntype Mode = 'auto' | 'close';\n\nexport type Extend = {\n  message: Dict<string | number>;\n  progressbar: Dict<string | number>;\n};\n\nexport interface Dict<T> {\n  [k: string]: T;\n}\nexport type Icon = 'error' | 'notification' | 'success' | { src: string; alt?: string };\n\nexport type Position = 'top' | 'top_left' | 'top_right' | 'bottom' | 'bottom_left' | 'bottom_right';\n\nexport interface NotijsOptions {\n  mode?: Mode;\n  icon: Icon;\n  duration: number;\n  position: Position;\n  extend?: Extend;\n}\n\nexport interface NotijsPromise {\n  fn: () => Promise<any>;\n  success: string;\n  error: string;\n}\n\nfunction message(msg: string, options = {} as NotijsOptions) {\n  let newNotijs: Auto | Static;\n  const { mode, ...rest } = options;\n\n  switch (mode) {\n    case 'auto':\n      newNotijs = new Auto(msg, rest);\n      break;\n    case 'close':\n      newNotijs = new Static(msg, rest);\n      break;\n    default:\n      newNotijs = new Auto(msg, rest);\n  }\n\n  newNotijs.render();\n}\n\nasync function promise(msg: string, options = {} as NotijsOptions, promise: NotijsPromise) {\n  const newNotijs = new Async(msg, options, promise);\n  return await newNotijs.render();\n}\n\nexport const notijs = {\n  message,\n  promise,\n};\n"],"names":["STYLES","body","progress","btn","animation","OPTIONS","constructor","text","options","duration","position","icon","extend","$container","document","getElementById","createElement","animate","this","bind","observer","MutationObserver","mutationsList","mutation","type","target","id","init","observe","childList","subtree","setCSS","classList","add","append","$message","setExtend","message","setAttribute","dataset","setPosition","setIcon","messageTxt","textContent","effect","coords","style","transform","opacity","disconnect","src","alt","errorSVG","successSVG","$icon","prop","styles","head","el","key","pos","parts","split","length","width","destroy","remove","Message","endTransitionEventListener","render","$progress","progressbar","appendChild","addEventListener","requestAnimationFrame","progressBar","curProgress","startProgress","elapsed","previousProgress","count","removeEventListener","$button","clickEventListener","img","promise","$loader","exec","setState","response","fn","error","currentState","txt","getElementsByTagName","success","notijs","msg","newNotijs","mode","rest","Auto","Static","async","promise2","Async"],"mappings":"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"}