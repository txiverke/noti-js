{"version":3,"file":"index.js","sources":["../src/settings.ts","../src/helpers.ts","../src/Message.ts","../src/Auto.ts","../src/Static.ts","../src/Async.ts","../src/index.ts"],"sourcesContent":["export default {\n  id: 'render_message_container',\n  options: {\n    duration: 3000,\n    position: 'top_right',\n  },\n  styles: {\n    container: {\n      position: 'fixed',\n      width: '250px',\n      height: 'auto',\n      flexDirection: 'column',\n      listStyle: 'none',\n      padding: '5px 0',\n      margin: '0',\n      display: 'flex',\n      alignItems: 'center',\n    },\n    message: {\n      width: '250px',\n      height: 'auto',\n      border: '1px solid rgb(0 0 0 / 0.2)',\n      borderRadius: '3px',\n      boxShadow: '0 3px 10px rgb(0 0 0 / 0.2)',\n      background: 'white',\n      padding: '10px',\n      margin: '5px 0',\n      fontSize: '13px',\n      boxSizing: 'border-box',\n      opacity: 0,\n      transform: 'translate(0, 0)',\n      transition: 'transform ease-in-out 250ms, opacity ease-in-out 250ms',\n      display: 'flex',\n      alignItems: 'center',\n    },\n    button: {\n      width: '18px',\n      height: 'auto',\n      background: 'transparent',\n      border: 'none',\n      cursor: 'pointer',\n      padding: 0,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    icon: {\n      width: '18px',\n      height: 'auto',\n      margin: '0 6px 0 0',\n      padding: 0,\n    },\n    txt: {\n      flex: 1,\n      margin: '0 6px 0 0',\n    },\n    progress: {\n      position: 'absolute',\n      bottom: '1px',\n      left: '1px',\n      width: '0',\n      height: '1px',\n      background: 'rgb(0 0 0 / 0.2)',\n    },\n    centered: {\n      width: '100%',\n    },\n  },\n};\n","import SETTINGS from './settings';\n\nconst POSITIONS = [\n  'top',\n  'top_left',\n  'top_right',\n  'bottom',\n  'bottom_left',\n  'bottom_right',\n];\n\nconst ANIMATION_SIZE = 10;\n\nexport function setDOM(\n  tag: string,\n  styles?: { [key: string]: string | number } | null,\n  attrs?: { [key: string]: string } | null,\n): HTMLElement{\n\n  const element = document.createElement(tag)\n\n  for (let key in styles) {\n    // @ts-ignore\n    element.style[key] = styles[key];\n  }\n\n  for (let key in attrs) {\n    element.setAttribute(key, attrs[key]);\n  }\n\n  return element;\n}\n\nexport function setPosition(position: string) {\n  if (!POSITIONS.includes(position)) {\n    throw new Error(`Position value must be: ${POSITIONS.join(', ')}.`);\n  }\n\n  let currentPosition = {} as { [key: string]: string | number };\n  const positions_values = position.split('_');\n\n  for (let key of positions_values) {\n    currentPosition[key] = 0;\n  }\n\n  return positions_values.length === 1\n    ? { ...currentPosition, ...SETTINGS.styles.centered }\n    : currentPosition;\n}\n\nexport function setTranslate(effect: string, position: string) {\n  switch (position) {\n    case 'top':\n      return effect === 'in' ? [0, ANIMATION_SIZE] : [0, -ANIMATION_SIZE];\n    case 'bottom':\n      return effect === 'in' ? [0, -ANIMATION_SIZE] : [0, ANIMATION_SIZE];\n    case 'top_right':\n    case 'bottom_right':\n      return effect === 'in' ? [-ANIMATION_SIZE, 0] : [ANIMATION_SIZE, 0];\n    case 'top_left':\n    case 'bottom_left':\n      return effect === 'in' ? [ANIMATION_SIZE, 0] : [-ANIMATION_SIZE, 0];\n    default:\n      return [0, 0];\n  }\n}\n","import { NotijsOptions } from './index';\nimport * as Helper from './helpers';\nimport SETTINGS from './settings';\nimport successSVG from './svgs/success.svg';\nimport errorSVG from './svgs/error.svg';\nimport notificationSVG from './svgs/notification.svg';\n\nexport class Message implements Message {\n  private observer: MutationObserver;\n  public $container!: HTMLElement;\n  public $message!: HTMLElement;\n  public $icon!: HTMLElement;\n\n  constructor(public text: string, public options: NotijsOptions) {\n    this.text = text;\n    this.options = {\n      duration: options?.duration\n        ? options.duration * 1000\n        : SETTINGS.options.duration,\n      icon: options?.icon,\n      position: options?.position || SETTINGS.options.position,\n      extend: options?.extend || {},\n    };\n\n    this.animate = this.animate.bind(this);\n\n    this.observer = new MutationObserver((mutationsList) =>\n      // @ts-ignore\n      this.mutationObserverCB(mutationsList, this.animate),\n    );\n  }\n\n  public init() {\n    this.$container =\n      document.getElementById(SETTINGS.id) ||\n      Helper.setDOM('ol', {\n        ...SETTINGS.styles.container,\n        ...Helper.setPosition(this.options.position),\n      });\n\n    this.$message = Helper.setDOM(\n      'li',\n      {\n        ...SETTINGS.styles.message,\n        ...this.options.extend,\n      },\n      {\n        'role': 'alert',\n        'aria-live': 'polite',\n        'aria-atomic': 'true',\n      },\n    );\n\n    this.observer.observe(document, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n    });\n\n    if (!document.getElementById(SETTINGS.id)) {\n      this.$container.id = SETTINGS.id;\n      document.body.append(this.$container);\n    }\n\n    if (this.options.icon) {\n      this.$icon = this.icon();\n      this.$message.append(this.$icon);\n    }\n\n    const messageTxt = Helper.setDOM('span', { ...SETTINGS.styles.txt });\n\n    messageTxt.textContent = this.text;\n    this.$message.append(messageTxt);\n    this.$container.append(this.$message);\n  }\n\n  protected animate(effect: 'in' | 'out') {\n    this.$message.dataset.animation = effect;\n    const [x, y] = Helper.setTranslate(effect, this.options.position);\n\n    setTimeout(() => {\n      this.$message.style.transform = `translate(${x}px, ${y}px)`;\n      this.$message.style.opacity = effect === 'in' ? '1' : '0';\n    });\n\n    this.observer.disconnect();\n  }\n\n  protected destroy() {\n    this.$message.remove();\n  }\n\n  private mutationObserverCB(\n    mutationsList: (MutationRecord & { target: { id: string } })[],\n    cb: (str: 'in') => void,\n  ) {\n    for (const mutation of mutationsList) {\n      if (\n        mutation.type === 'childList' &&\n        mutation.target?.id === SETTINGS.id\n      ) {\n        cb('in');\n      }\n    }\n  }\n\n  private icon() {\n    let src: typeof errorSVG | typeof notificationSVG | typeof successSVG | '';\n\n    switch (this.options.icon) {\n      case 'error':\n        src = errorSVG;\n        break;\n      case 'notification':\n        src = notificationSVG;\n        break;\n      case 'success':\n        src = successSVG;\n        break;\n      default:\n        throw new Error('Invalid Icon');\n    }\n\n    return Helper.setDOM('img', { ...SETTINGS.styles.icon }, { src });\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions } from './index';\nimport * as Helper from './helpers';\nimport SETTINGS from './settings';\n\nexport class Auto extends Message {\n  $progress!: HTMLElement;\n  start_time_progress!: number;\n  previous_time_progress!: number;\n\n  protected endTransitionEventListener: EventListener;\n\n  constructor(text: string, options: NotijsOptions) {\n    super(text, options);\n    this.endTransitionEventListener = () => this.destroy();\n  }\n\n  public render() {\n    this.init();\n    this.$progress = Helper.setDOM('div', { ...SETTINGS.styles.progress });\n    this.$message.addEventListener(\n      'transitionend',\n      this.endTransitionEventListener,\n    );\n\n    this.$message.appendChild(this.$progress);\n    window.requestAnimationFrame(this.progress.bind(this));\n\n    setTimeout(() => this.animate('out'), this.options.duration);\n  }\n\n  private progress(current_time_progress: number) {\n    if (!this.start_time_progress) {\n      this.start_time_progress = current_time_progress;\n    }\n\n    const elapsed = current_time_progress - this.start_time_progress;\n\n    if (this.previous_time_progress !== current_time_progress) {\n      const count = (elapsed / this.options.duration) * 99;\n      this.$progress.style.width = `${count}%`;\n    }\n\n    if (elapsed < this.options.duration) {\n      this.previous_time_progress = current_time_progress;\n      window.requestAnimationFrame(this.progress.bind(this));\n    }\n  }\n\n  protected destroy() {\n    if (this.$message.dataset.animation === 'out') {\n      super.destroy();\n\n      this.$message.removeEventListener(\n        'transitionend',\n        this.endTransitionEventListener,\n      );\n    }\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions } from './index';\nimport SETTINGS from './settings';\nimport * as Helper from './helpers';\nimport closeSVG from './svgs/close.svg';\n\nexport class Static extends Message {\n  public $button: HTMLElement;\n  protected clickEventListener: EventListener;\n\n  constructor(text: string, options: NotijsOptions) {\n    super(text, options);\n    this.$button = Helper.setDOM('button', { ...SETTINGS.styles.button });\n\n    this.clickEventListener = () => this.destroy();\n  }\n\n  public render() {\n    this.init();\n\n    const img = Helper.setDOM(\n      'img',\n      { ...SETTINGS.styles.icon },\n      { src: closeSVG },\n    );\n\n    this.$button.appendChild(img);\n    this.$message.appendChild(this.$button);\n    this.$button.addEventListener('click', this.clickEventListener);\n  }\n\n  protected destroy() {\n    super.destroy();\n    this.$button.removeEventListener('click', this.clickEventListener);\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions } from './index';\n\nexport class Async extends Message {\n  constructor(\n    text: string,\n    options: NotijsOptions,\n    public promise: () => Promise<any>,\n  ) {\n    super(text, options);\n    this.promise = promise;\n  }\n\n  async render() {\n    this.init();\n    const response = await this.promise();\n    this.$message.children[0].textContent = response;\n    return response\n  }\n}\n","import { Auto } from './Auto';\nimport { Static } from './Static';\nimport { Async } from './Async';\nimport { Dict } from './types';\n\ntype Icon = 'error' | 'notification' | 'success';\ntype Mode = 'auto' | 'close';\n\nexport interface NotijsOptions {\n  mode?: Mode;\n  icon: Icon;\n  duration: number;\n  position: string;\n  extend: Dict<{}>;\n}\n\nfunction render(msg: string, options = {} as NotijsOptions) {\n  let newNotijs: Auto | Static;\n  const { mode, ...rest } = options;\n\n  switch (mode) {\n    case 'auto':\n      newNotijs = new Auto(msg, rest);\n      break;\n    case 'close':\n      newNotijs = new Static(msg, rest);\n      break;\n    default:\n      newNotijs = new Auto(msg, rest);\n  }\n\n  newNotijs.render();\n}\n\nasync function promise(\n  msg: string,\n  options = {} as NotijsOptions,\n  promise: () => Promise<any>,\n) {\n  const newNotijs = new Async(msg, options, promise);\n  return await newNotijs.render();\n}\n\nexport const notijs = {\n  render,\n  promise,\n};\n"],"names":["duration","position","container","width","height","flexDirection","listStyle","padding","margin","display","alignItems","message","border","borderRadius","boxShadow","background","fontSize","boxSizing","opacity","transform","transition","button","cursor","justifyContent","icon","txt","flex","progress","bottom","left","centered","POSITIONS","tag","styles","attrs","element","document","createElement","key","style","setAttribute","includes","Error","join","currentPosition","positions_values","split","length","SETTINGS","constructor","text","options","extend","animate","this","bind","observer","MutationObserver","mutationsList","mutationObserverCB","init","$container","getElementById","Helper.setDOM","Helper.setPosition","$message","role","observe","attributes","childList","subtree","id","body","append","$icon","messageTxt","textContent","effect","dataset","animation","x","y","Helper.setTranslate","disconnect","destroy","remove","cb","mutation","type","target","src","Message","endTransitionEventListener","render","$progress","addEventListener","appendChild","requestAnimationFrame","current_time_progress","start_time_progress","elapsed","previous_time_progress","count","removeEventListener","$button","clickEventListener","img","promise","response","children","notijs","msg","newNotijs","mode","rest","Auto","Static","async","promise2","Async"],"mappings":"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"}