{"version":3,"file":"index.mjs","sources":["../src/settings.ts","../src/helpers.ts","../src/Message.ts","../src/Auto.ts","../src/Static.ts","../src/Async.ts","../src/index.ts"],"sourcesContent":["export default {\n  id: 'render_message_container',\n  options: {\n    duration: 3000,\n    position: 'top_right',\n  },\n  styles: {\n    message: {\n      width: '250px',\n      height: 'auto',\n      border: '1px solid rgb(0 0 0 / 0.2)',\n      borderRadius: '3px',\n      boxShadow: '0 3px 10px rgb(0 0 0 / 0.2)',\n      background: 'white',\n      padding: '10px',\n      margin: '5px 0',\n      fontSize: '13px',\n      boxSizing: 'border-box',\n      opacity: 0,\n      transform: 'translate(0, 0)',\n      transition: 'transform ease-in-out 250ms, opacity ease-in-out 250ms',\n      display: 'flex',\n      alignItems: 'center',\n    },\n    button: {\n      width: '18px',\n      height: 'auto',\n      background: 'transparent',\n      border: 'none',\n      cursor: 'pointer',\n      padding: 0,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    icon: {\n      width: '18px',\n      height: 'auto',\n    },\n    txt: {\n      flex: 1,\n      margin: '0 6px 0 0',\n    },\n    progress: {\n      position: 'absolute',\n      bottom: '1px',\n      left: '1px',\n      width: '0',\n      height: '1px',\n      background: 'rgb(0 0 0 / 0.2)',\n    },\n    centered: {\n      width: '100%',\n    },\n  },\n};\n","import SETTINGS from './settings';\n\nconst POSITIONS = [\n  'top',\n  'top_left',\n  'top_right',\n  'bottom',\n  'bottom_left',\n  'bottom_right',\n];\n\nconst ANIMATION_SIZE = 10;\n\nexport function setDOM(\n  tag: string,\n  styles?: { [key: string]: string | number } | null,\n  attrs?: { [key: string]: string } | null,\n): HTMLElement{\n\n  const element = document.createElement(tag)\n\n  for (let key in styles) {\n    // @ts-ignore\n    element.style[key] = styles[key];\n  }\n\n  for (let key in attrs) {\n    element.setAttribute(key, attrs[key]);\n  }\n\n  return element;\n}\n\nexport function setPosition(position: string) {\n  if (!POSITIONS.includes(position)) {\n    throw new Error(`Position value must be: ${POSITIONS.join(', ')}.`);\n  }\n\n  let currentPosition = {} as { [key: string]: string | number };\n  const positions_values = position.split('_');\n\n  for (let key of positions_values) {\n    currentPosition[key] = 0;\n  }\n\n  return positions_values.length === 1\n    ? { ...currentPosition, ...SETTINGS.styles.centered }\n    : currentPosition;\n}\n\nexport function setTranslate(effect: string, position: string) {\n  switch (position) {\n    case 'top':\n      return effect === 'in' ? [0, ANIMATION_SIZE] : [0, -ANIMATION_SIZE];\n    case 'bottom':\n      return effect === 'in' ? [0, -ANIMATION_SIZE] : [0, ANIMATION_SIZE];\n    case 'top_right':\n    case 'bottom_right':\n      return effect === 'in' ? [-ANIMATION_SIZE, 0] : [ANIMATION_SIZE, 0];\n    case 'top_left':\n    case 'bottom_left':\n      return effect === 'in' ? [ANIMATION_SIZE, 0] : [-ANIMATION_SIZE, 0];\n    default:\n      return [0, 0];\n  }\n}\n","import { NotijsOptions } from './index';\nimport * as Helper from './helpers';\nimport SETTINGS from './settings';\nimport successSVG from './svgs/success.svg';\nimport errorSVG from './svgs/error.svg';\nimport notificationSVG from './svgs/notification.svg';\n\nexport class Message {\n  private observer: MutationObserver;\n  public $container!: HTMLElement;\n  public $message!: HTMLElement;\n  public $icon!: HTMLElement;\n\n  constructor(public text: string, public options: NotijsOptions) {\n    this.text = text;\n    this.options = {\n      duration: options?.duration\n        ? options.duration * 1000\n        : SETTINGS.options.duration,\n      icon: options?.icon,\n      position: options?.position || SETTINGS.options.position,\n      extend: options?.extend || {},\n    };\n\n    this.animate = this.animate.bind(this);\n\n    this.observer = new MutationObserver((mutationsList) =>\n      // @ts-ignore\n      this.mutationObserverCB(mutationsList, this.animate),\n    );\n  }\n\n  public init() {\n    this.$container =\n      document.getElementById(SETTINGS.id) ||\n      Helper.setDOM('ol', { ...Helper.setPosition(this.options.position) });\n\n    this.$message = Helper.setDOM(\n      'li',\n      {\n        ...SETTINGS.styles.message,\n        ...this.options.extend,\n      },\n      {\n        'role': 'alert',\n        'aria-live': 'polite',\n        'aria-atomic': 'true',\n      },\n    );\n\n    this.observer.observe(document, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n    });\n\n    if (!document.getElementById(SETTINGS.id)) {\n      this.css();\n      this.$container.id = SETTINGS.id;\n      this.$container.classList.add('notijs_container');\n      document.body.append(this.$container);\n    }\n\n    if (this.options.icon) {\n      this.$icon = this.icon();\n      this.$message.append(this.$icon);\n    }\n\n    const messageTxt = Helper.setDOM('span', { ...SETTINGS.styles.txt });\n    messageTxt.textContent = this.text;\n\n    this.$message.append(messageTxt);\n    this.$container.append(this.$message);\n  }\n\n  protected animate(effect: 'in' | 'out') {\n    this.$message.dataset.animation = effect;\n    const [x, y] = Helper.setTranslate(effect, this.options.position);\n\n    setTimeout(() => {\n      this.$message.style.transform = `translate(${x}px, ${y}px)`;\n      this.$message.style.opacity = effect === 'in' ? '1' : '0';\n    });\n\n    this.observer.disconnect();\n  }\n\n  protected destroy() {\n    this.$message.remove();\n  }\n\n  private mutationObserverCB(\n    mutationsList: (MutationRecord & { target: { id: string } })[],\n    cb: (str: 'in') => void,\n  ) {\n    for (const mutation of mutationsList) {\n      if (\n        mutation.type === 'childList' &&\n        mutation.target?.id === SETTINGS.id\n      ) {\n        cb('in');\n      }\n    }\n  }\n\n  private icon() {\n    let src: typeof errorSVG | typeof notificationSVG | typeof successSVG;\n\n    switch (this.options.icon) {\n      case 'error':\n        src = errorSVG;\n        break;\n      case 'notification':\n        src = notificationSVG;\n        break;\n      case 'success':\n        src = successSVG;\n        break;\n      default:\n        throw new Error('Invalid Icon');\n    }\n\n    return Helper.setDOM(\n      'img',\n      { ...SETTINGS.styles.icon, margin: '0 8px 0 0' },\n      { src },\n    );\n  }\n\n  private css() {\n    const animationCSS = Helper.setDOM('style');\n    animationCSS.id = 'notijs_styles';\n    animationCSS.textContent = `.notijs_container{position:fixed;width: 250px;height: auto;flex-direction: column;list-style:none;padding: 5px 0;margin: 0;display: flex;align-items: center;}.notijs_rotate{animation: notijs_rotation .75s linear infinite;}@keyframes notijs_rotation {from{transform: rotate(0deg);}to{transform: rotate(359deg);}`;\n\n    document.head.append(animationCSS);\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions } from './index';\nimport * as Helper from './helpers';\nimport SETTINGS from './settings';\n\nexport class Auto extends Message {\n  $progress!: HTMLElement;\n  start_time_progress!: number;\n  previous_time_progress!: number;\n\n  protected endTransitionEventListener: EventListener;\n\n  constructor(text: string, options: NotijsOptions) {\n    super(text, options);\n    this.endTransitionEventListener = () => this.destroy();\n  }\n\n  public render() {\n    this.init();\n    this.$progress = Helper.setDOM('div', { ...SETTINGS.styles.progress });\n    this.$message.addEventListener(\n      'transitionend',\n      this.endTransitionEventListener,\n    );\n\n    this.$message.appendChild(this.$progress);\n    window.requestAnimationFrame(this.progress.bind(this));\n\n    setTimeout(() => this.animate('out'), this.options.duration);\n  }\n\n  private progress(current_time_progress: number) {\n    if (!this.start_time_progress) {\n      this.start_time_progress = current_time_progress;\n    }\n\n    const elapsed = current_time_progress - this.start_time_progress;\n\n    if (this.previous_time_progress !== current_time_progress) {\n      const count = (elapsed / this.options.duration) * 99;\n      this.$progress.style.width = `${count}%`;\n    }\n\n    if (elapsed < this.options.duration) {\n      this.previous_time_progress = current_time_progress;\n      window.requestAnimationFrame(this.progress.bind(this));\n    }\n  }\n\n  protected destroy() {\n    if (this.$message.dataset.animation === 'out') {\n      super.destroy();\n\n      this.$message.removeEventListener(\n        'transitionend',\n        this.endTransitionEventListener,\n      );\n    }\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions } from './index';\nimport SETTINGS from './settings';\nimport * as Helper from './helpers';\nimport closeSVG from './svgs/close.svg';\n\nexport class Static extends Message {\n  public $button: HTMLElement;\n  protected clickEventListener: EventListener;\n\n  constructor(text: string, options: NotijsOptions) {\n    super(text, options);\n    this.$button = Helper.setDOM('button', { ...SETTINGS.styles.button });\n\n    this.clickEventListener = () => this.destroy();\n  }\n\n  public render() {\n    this.init();\n\n    const img = Helper.setDOM(\n      'img',\n      { ...SETTINGS.styles.icon },\n      { src: closeSVG },\n    );\n\n    this.$button.appendChild(img);\n    this.$message.appendChild(this.$button);\n    this.$button.addEventListener('click', this.clickEventListener);\n  }\n\n  protected destroy() {\n    super.destroy();\n    this.$button.removeEventListener('click', this.clickEventListener);\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions } from './index';\nimport * as Helper from './helpers';\nimport SETTINGS from './settings';\nimport { NotijsPromise } from './index';\n\nimport loadingSVG from './svgs/loading.svg';\nimport successSVG from './svgs/success.svg';\nimport errorSVG from './svgs/error.svg';\n\ntype State = 'error' | 'running' | 'stopped' | 'success';\n\nexport class Async extends Message {\n  public $loader!: HTMLElement | HTMLImageElement;\n  public state: State;\n  protected endTransitionEventListener: EventListener;\n\n  constructor(\n    text: string,\n    options: NotijsOptions,\n    public promise: NotijsPromise,\n  ) {\n    super(text, options);\n    this.promise = promise;\n    this.state = 'stopped';\n    this.endTransitionEventListener = () => this.destroy();\n  }\n\n  public async render() {\n    this.init();\n    this.$loader = Helper.setDOM(\n      'img',\n      { ...SETTINGS.styles.icon },\n      { src: loadingSVG, alt: 'Loading...' },\n    );\n    this.$message.addEventListener(\n      'transitionend',\n      this.endTransitionEventListener,\n    );\n\n    return await this.exec();\n  }\n\n  private async exec() {\n    try {\n      this.setState('running');\n      const response = await this.promise.fn();\n      this.setState('success', response);\n      return response;\n    } catch (error) {\n      this.setState('error');\n      return error;\n    }\n  }\n\n  private setState(currentState: State, response?: any) {\n    this.state = currentState;\n    const txt = this.$message.getElementsByTagName('span')[0];\n\n    switch (this.state) {\n      case 'error':\n        this.$loader.classList.remove('notijs_rotate');\n        this.$loader.setAttribute('src', errorSVG);\n        txt.textContent = this.promise.error;\n        setTimeout(() => this.animate('out'), this.options.duration);\n        break;\n\n      case 'running':\n        this.$loader.classList.add('notijs_rotate');\n        this.$message.append(this.$loader);\n        break;\n\n      case 'success':\n        this.$loader.classList.remove('notijs_rotate');\n\n        this.$loader.setAttribute('src', successSVG);\n        txt.textContent = this.promise.success;\n        setTimeout(() => this.animate('out'), this.options.duration);\n        break;\n      default:\n        throw new Error();\n    }\n  }\n\n  protected destroy() {\n    if (this.$message.dataset.animation === 'out') {\n      super.destroy();\n\n      this.$message.removeEventListener(\n        'transitionend',\n        this.endTransitionEventListener,\n      );\n    }\n  }\n}\n","import { Auto } from './Auto';\nimport { Static } from './Static';\nimport { Async } from './Async';\nimport { Dict } from './types';\n\ntype Icon = 'error' | 'notification' | 'success';\ntype Mode = 'auto' | 'close';\n\nexport interface NotijsOptions {\n  mode?: Mode;\n  icon: Icon;\n  duration: number;\n  position: string;\n  extend: Dict<{}>;\n}\n\nexport interface NotijsPromise {\n  fn: () => Promise<any>;\n  success: string;\n  error: string;\n}\n\nfunction render(msg: string, options = {} as NotijsOptions) {\n  let newNotijs: Auto | Static;\n  const { mode, ...rest } = options;\n\n  switch (mode) {\n    case 'auto':\n      newNotijs = new Auto(msg, rest);\n      break;\n    case 'close':\n      newNotijs = new Static(msg, rest);\n      break;\n    default:\n      newNotijs = new Auto(msg, rest);\n  }\n\n  newNotijs.render();\n}\n\nasync function promise(\n  msg: string,\n  options = {} as NotijsOptions,\n  promise: NotijsPromise,\n) {\n  const newNotijs = new Async(msg, options, promise);\n  return await newNotijs.render();\n}\n\nexport const notijs = {\n  render,\n  promise,\n};\n"],"names":["duration","position","message","width","height","border","borderRadius","boxShadow","background","padding","margin","fontSize","boxSizing","opacity","transform","transition","display","alignItems","button","cursor","justifyContent","icon","txt","flex","progress","bottom","left","centered","POSITIONS","tag","styles","attrs","element","document","createElement","key","style","setAttribute","includes","Error","join","currentPosition","positions_values","split","length","SETTINGS","constructor","text","options","extend","animate","this","bind","observer","MutationObserver","mutationsList","mutationObserverCB","init","$container","getElementById","Helper.setDOM","Helper.setPosition","$message","role","observe","attributes","childList","subtree","css","id","classList","add","body","append","$icon","messageTxt","textContent","effect","dataset","animation","x","y","Helper.setTranslate","disconnect","destroy","remove","cb","mutation","type","target","src","errorSVG","successSVG","animationCSS","head","Message","endTransitionEventListener","render","$progress","addEventListener","appendChild","requestAnimationFrame","current_time_progress","start_time_progress","elapsed","previous_time_progress","count","removeEventListener","$button","clickEventListener","img","promise","state","$loader","alt","exec","setState","response","fn","error","currentState","getElementsByTagName","success","notijs","msg","newNotijs","mode","rest","Auto","Static","async","promise2","Async"],"mappings":"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"}