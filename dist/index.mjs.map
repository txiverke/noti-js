{"version":3,"file":"index.mjs","sources":["../src/helpers.ts","../src/settings.ts","../src/Message.ts","../src/Auto.ts","../src/Static.ts","../src/Async.ts","../src/index.ts"],"sourcesContent":["const POSITIONS = ['top', 'top_left', 'top_right', 'bottom', 'bottom_left', 'bottom_right'];\nconst ANIMATION_SIZE = 10;\n\nexport function setDOM(\n  element: HTMLElement,\n  styles?: { [key: string]: string | number } | null,\n  attrs?: { [key: string]: string } | null,\n): HTMLElement {\n  for (let key in styles) {\n    // @ts-ignore\n    element.style[key] = styles[key];\n  }\n\n  for (let key in attrs) {\n    element.setAttribute(key, attrs[key]);\n  }\n\n  return element;\n}\n\nexport function setPosition(position: string) {\n  if (!POSITIONS.includes(position)) {\n    throw new Error(`Position value must be: ${POSITIONS.join(', ')}.`);\n  }\n\n  let currentPosition = {} as { [key: string]: string | number };\n  const positions_values = position.split('_');\n\n  for (let key of positions_values) {\n    currentPosition[key] = 0;\n  }\n\n  return positions_values.length === 1 ? { ...currentPosition, width: '100%' } : currentPosition;\n}\n\nexport function setTranslate(effect: string, position: string) {\n  switch (position) {\n    case 'top':\n      return effect === 'in' ? [0, ANIMATION_SIZE] : [0, -ANIMATION_SIZE];\n    case 'bottom':\n      return effect === 'in' ? [0, -ANIMATION_SIZE] : [0, ANIMATION_SIZE];\n    case 'top_right':\n    case 'bottom_right':\n      return effect === 'in' ? [-ANIMATION_SIZE, 0] : [ANIMATION_SIZE, 0];\n    case 'top_left':\n    case 'bottom_left':\n      return effect === 'in' ? [ANIMATION_SIZE, 0] : [-ANIMATION_SIZE, 0];\n    default:\n      return [0, 0];\n  }\n}\n","export const STYLES = `.notijs_container{position:fixed;width:250px;height: auto;flex-direction:column;list-style:none;padding:5px 0;margin:0;display:flex;align-items:center;}.notijs_message{width:250px;height:auto;border:1px solid rgb(0 0 0 / 0.2);border-radius:3px;box-shadow:0 3px 10px rgb(0 0 0 / 0.2);background:white;padding:10px;margin:5px 0;font-size:13px;box-sizing:border-box;opacity:0;transform:translate(0,0);transition:transform ease-in-out 250ms, opacity ease-in-out 250ms;display:flex;align-items:center;}.notijs_progress{position:absolute;bottom:1px;left:1px;width:0;height:1px;background:rgb(0 0 0 / 0.2)}.notijs_btn{background:transparent;border:none;cursor:pointer;padding:0 0 0 6px;display:flex;justify-content:center;align-items:center;}.notijs_txt{flex:1;margin;0 6px 0 0;}.notijs_rotate{animation: notijs_rotation .75s linear infinite;}@keyframes notijs_rotation {from{transform: rotate(0deg);}to{transform: rotate(359deg);}`;\n\nexport const ARIA = {\n  'role': 'alert',\n  'aria-live': 'polite',\n  'aria-atomic': 'true',\n};\n\nexport const OPTIONS = {\n  id: 'render_message_container',\n  duration: 3,\n  position: 'top_right',\n};\n","import { NotijsOptions } from './index';\nimport * as Helper from './helpers';\nimport { ARIA, OPTIONS, STYLES } from './settings';\n\nimport successSVG from './svgs/success.svg';\nimport errorSVG from './svgs/error.svg';\nimport notificationSVG from './svgs/notification.svg';\n\nexport class Message {\n  private observer: MutationObserver;\n  public $container!: HTMLElement;\n  public $message!: HTMLElement;\n  public $icon!: HTMLElement;\n\n  constructor(public text: string, public options: NotijsOptions) {\n    this.text = text;\n    this.options = {\n      duration: (options?.duration || OPTIONS.duration) * 1000,\n      position: options?.position || OPTIONS.position,\n      icon: options?.icon,\n      extend: options?.extend,\n    };\n\n    this.$container = document.getElementById(OPTIONS.id) || document.createElement('ol');\n    this.animate = this.animate.bind(this);\n\n    this.observer = new MutationObserver((mutationsList: (MutationRecord & { target: any })[]) => {\n      for (const mutation of mutationsList) {\n        if (mutation.type === 'childList' && mutation.target.id === OPTIONS.id) {\n          this.animate('in');\n        }\n      }\n    });\n  }\n\n  public init() {\n    if (!document.getElementById(OPTIONS.id)) {\n      this.css();\n\n      this.$container.id = OPTIONS.id;\n      this.$container.classList.add('notijs_container');\n      this.$container.dataset.position = this.options.position;\n      this.$container = Helper.setDOM(this.$container, {\n        ...Helper.setPosition(this.options.position),\n      });\n\n      document.body.append(this.$container);\n    }\n\n    this.$message = document.createElement('li');\n    this.$message.classList.add('notijs_message');\n    this.$message = Helper.setDOM(this.$message, this.options?.extend?.message, ARIA);\n\n    this.observer.observe(document, { childList: true, subtree: true });\n\n    if (this.options.position !== this.$container.dataset.position) {\n      Helper.setDOM(this.$container, { ...Helper.setPosition(this.options.position) });\n    }\n\n    if (this.options.icon) {\n      this.$icon = this.icon();\n      this.$message.append(this.$icon);\n    }\n\n    const messageTxt = document.createElement('span');\n    messageTxt.classList.add('notijs_txt');\n    messageTxt.textContent = this.text;\n\n    this.$message.append(messageTxt);\n    this.$container.append(this.$message);\n  }\n\n  protected animate(effect: 'in' | 'out') {\n    this.$message.dataset.animation = effect;\n    const [x, y] = Helper.setTranslate(effect, this.options.position);\n\n    setTimeout(() => {\n      this.$message.style.transform = `translate(${x}px, ${y}px)`;\n      this.$message.style.opacity = effect === 'in' ? '1' : '0';\n    });\n\n    this.observer.disconnect();\n  }\n\n  protected destroy() {\n    this.$message.remove();\n  }\n\n  private icon() {\n    let img = Helper.setDOM(document.createElement('img'), {\n      margin: '0 8px 0 0',\n      width: '18px',\n      height: 'auto',\n    });\n\n    if (typeof this.options.icon === 'object') {\n      img = Helper.setDOM(img, null, {\n        src: this.options.icon.src,\n        alt: this.options.icon.alt || 'Icon',\n      });\n    } else {\n      img = Helper.setDOM(img, null, {\n        src:\n          this.options.icon === 'error'\n            ? errorSVG\n            : this.options.icon === 'success'\n            ? successSVG\n            : notificationSVG,\n        alt: this.options.icon,\n      });\n    }\n\n    return img;\n  }\n\n  private css() {\n    const styles = document.createElement('style');\n    styles.id = 'notijs_styles';\n    styles.textContent = STYLES;\n\n    document.head.append(styles);\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions } from './index';\nimport * as Helper from './helpers';\n\nexport class Auto extends Message {\n  $progress!: HTMLElement;\n  start_time_progress!: number;\n  previous_time_progress!: number;\n\n  protected endTransitionEventListener: EventListener;\n\n  constructor(text: string, options: NotijsOptions) {\n    super(text, options);\n    this.endTransitionEventListener = () => this.destroy();\n  }\n\n  public render() {\n    this.init();\n\n    this.$progress = document.createElement('div');\n    this.$progress.classList.add('notijs_progress');\n    this.$progress = Helper.setDOM(this.$progress, this.options?.extend?.progressbar);\n\n    this.$message.addEventListener('transitionend', this.endTransitionEventListener);\n    this.$message.appendChild(this.$progress);\n\n    window.requestAnimationFrame(this.progress.bind(this));\n\n    setTimeout(() => this.animate('out'), this.options.duration);\n  }\n\n  private progress(current_time_progress: number) {\n    if (!this.start_time_progress) {\n      this.start_time_progress = current_time_progress;\n    }\n\n    const elapsed = current_time_progress - this.start_time_progress;\n\n    if (this.previous_time_progress !== current_time_progress) {\n      const count = (elapsed / this.options.duration) * 99;\n      this.$progress.style.width = `${count}%`;\n    }\n\n    if (elapsed < this.options.duration) {\n      this.previous_time_progress = current_time_progress;\n      window.requestAnimationFrame(this.progress.bind(this));\n    }\n  }\n\n  protected destroy() {\n    if (this.$message.dataset.animation === 'out') {\n      super.destroy();\n\n      this.$message.removeEventListener('transitionend', this.endTransitionEventListener);\n    }\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions } from './index';\nimport closeSVG from './svgs/close.svg';\n\nexport class Static extends Message {\n  public $button: HTMLElement;\n  protected clickEventListener: EventListener;\n\n  constructor(text: string, options: NotijsOptions) {\n    super(text, options);\n    this.$button = document.createElement('button');\n    this.clickEventListener = () => this.destroy();\n  }\n\n  public render() {\n    this.init();\n\n    const img = document.createElement('img');\n    img.src = closeSVG;\n    img.alt = 'Close Message';\n\n    this.$button.classList.add('notijs_btn');\n    this.$button.appendChild(img);\n    this.$message.appendChild(this.$button);\n    this.$button.addEventListener('click', this.clickEventListener);\n  }\n\n  protected destroy() {\n    super.destroy();\n    this.$button.removeEventListener('click', this.clickEventListener);\n  }\n}\n","import { Message } from './Message';\nimport { NotijsOptions, NotijsPromise } from './index';\nimport loadingSVG from './svgs/loading.svg';\nimport successSVG from './svgs/success.svg';\nimport errorSVG from './svgs/error.svg';\n\ntype State = 'error' | 'running' | 'stopped' | 'success';\n\nexport class Async extends Message {\n  public $loader!: HTMLImageElement;\n  public state: State;\n  protected endTransitionEventListener: EventListener;\n\n  constructor(text: string, options: NotijsOptions, public promise: NotijsPromise) {\n    super(text, options);\n    this.promise = promise;\n    this.state = 'stopped';\n    this.endTransitionEventListener = () => this.destroy();\n  }\n\n  public async render() {\n    this.init();\n    this.$loader = document.createElement('img');\n    this.$loader.src = loadingSVG;\n    this.$loader.alt = 'Loading...';\n    this.$message.addEventListener('transitionend', this.endTransitionEventListener);\n\n    return await this.exec();\n  }\n\n  private async exec() {\n    try {\n      this.setState('running');\n      const response = await this.promise.fn();\n      this.setState('success');\n      return response;\n    } catch (error) {\n      this.setState('error');\n      return error;\n    }\n  }\n\n  private setState(currentState: State) {\n    this.state = currentState;\n    const txt = this.$message.getElementsByTagName('span')[0];\n\n    switch (this.state) {\n      case 'error':\n        this.$loader.classList.remove('notijs_rotate');\n        this.$loader.setAttribute('src', errorSVG);\n        txt.textContent = this.promise.error;\n        setTimeout(() => this.animate('out'), this.options.duration);\n        break;\n\n      case 'running':\n        this.$loader.classList.add('notijs_rotate');\n        this.$message.append(this.$loader);\n        break;\n\n      case 'success':\n        this.$loader.classList.remove('notijs_rotate');\n\n        this.$loader.setAttribute('src', successSVG);\n        txt.textContent = this.promise.success;\n        setTimeout(() => this.animate('out'), this.options.duration);\n        break;\n      default:\n        throw new Error();\n    }\n  }\n\n  protected destroy() {\n    if (this.$message.dataset.animation === 'out') {\n      super.destroy();\n\n      this.$message.removeEventListener('transitionend', this.endTransitionEventListener);\n    }\n  }\n}\n","import { Auto } from './Auto';\nimport { Static } from './Static';\nimport { Async } from './Async';\nimport { Dict } from './types';\n\ntype Icon = 'error' | 'notification' | 'success' | { src: string; alt?: string };\ntype Mode = 'auto' | 'close';\n\nexport interface NotijsOptions {\n  mode?: Mode;\n  icon: Icon;\n  duration: number;\n  position: string;\n  extend?: {\n    message: Dict<string | number>;\n    progressbar: Dict<string | number>;\n  };\n}\n\nexport interface NotijsPromise {\n  fn: () => Promise<any>;\n  success: string;\n  error: string;\n}\n\nfunction render(msg: string, options = {} as NotijsOptions) {\n  let newNotijs: Auto | Static;\n  const { mode, ...rest } = options;\n\n  switch (mode) {\n    case 'auto':\n      newNotijs = new Auto(msg, rest);\n      break;\n    case 'close':\n      newNotijs = new Static(msg, rest);\n      break;\n    default:\n      newNotijs = new Auto(msg, rest);\n  }\n\n  newNotijs.render();\n}\n\nasync function promise(msg: string, options = {} as NotijsOptions, promise: NotijsPromise) {\n  const newNotijs = new Async(msg, options, promise);\n  return await newNotijs.render();\n}\n\nexport const notijs = {\n  render,\n  promise,\n};\n"],"names":["POSITIONS","element","styles","attrs","key","style","setAttribute","position","includes","Error","join","currentPosition","positions_values","split","length","width","ARIA","role","OPTIONS","constructor","text","options","duration","icon","extend","$container","document","getElementById","createElement","animate","this","bind","observer","MutationObserver","mutationsList","mutation","type","target","id","init","css","classList","add","dataset","Helper.setDOM","Helper.setPosition","body","append","$message","message","observe","childList","subtree","$icon","messageTxt","textContent","effect","animation","x","y","Helper.setTranslate","transform","opacity","disconnect","destroy","remove","img","margin","height","src","alt","errorSVG","successSVG","head","Message","endTransitionEventListener","render","$progress","progressbar","addEventListener","appendChild","requestAnimationFrame","progress","current_time_progress","start_time_progress","elapsed","previous_time_progress","count","removeEventListener","$button","clickEventListener","promise","state","$loader","exec","setState","response","fn","error","currentState","txt","getElementsByTagName","success","notijs","msg","newNotijs","mode","rest","Auto","Static","async","promise2","Async"],"mappings":"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"}